<!doctype html>
<html lang="en">
    <head>
        <title>Settings</title>
<link rel="stylesheet" type="text/css" href="style.css?v=0.8.155"/>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta charset="utf-8">
<script type="application/javascript" src="api.js?v=0.8.155"></script>
<link rel="stylesheet" type="text/css" href="colors.css?v=0.8.155"/>
<meta name="robots" content="noindex, nofollow" />
<link rel="icon" type="image/x-icon" href="/favicon.ico">
    </head>
    <body>
<div class="topnav">
    <a href="/?v=0.8.155" class="title">AhoyDTU</a>
    <a href="javascript:void(0);" class="icon" onclick="topnav()">
        <span></span>
        <span></span>
        <span></span>
    </a>
    <div id="topnav" class="mobile">
        <a id="nav3" class="hide" href="/live?v=0.8.155">Live</a>
        <a id="nav12" href="#" class="hide" target="_blank">Custom Link</a>
        <span class="separator"></span>
        <a id="nav4" class="hide" href="/serial?v=0.8.155">Webserial</a>
        <a id="nav5" class="hide" href="/setup?v=0.8.155">Settings</a>
        <a id="nav7" class="hide" href="/system?v=0.8.155">System</a>
        <span class="separator"></span>
        <a id="nav8" href="/api" target="_blank">REST API</a>
        <a id="nav9" href="https://github.com/PaeserBastelstube/AhoyDTU4RPi/wiki" target="_blank">Documentation</a>
        <a id="nav13" href="https://github.com/PaeserBastelstube/AhoyDTU4RPi" target="_blank">Website</a>
        <a id="nav10" href="/about?v=0.8.155">About</a>
        <span class="separator"></span>
        <a id="nav0" class="hide" href="/login">Login</a>
        <a id="nav1" class="hide" href="/logout">Logout</a>
    </div>
    <div id="wifiicon" class="info"></div>
</div>
        <div id="wrapper">
            <div id="content">
                <form method="post" action="/save" id="settings">
                    <button type="button" class="s_collapsible mt-4">System Config</button>
                    <div class="s_content">
                        <fieldset class="mb-2">
                            <legend class="des">System Config</legend>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3">Device Host Name</div>
                                <div class="col-12 col-sm-9"><input type="text" name="device"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8 col-sm-3">Reboot Ahoy at midnight</div>
                                <div class="col-4 col-sm-9"><input type="checkbox" name="schedReboot"/></div>
                            </div>
                            <div class="row mb-5">
                                <div class="col-8 col-sm-3">Dark Mode</div>
                                <div class="col-4 col-sm-9"><input type="checkbox" name="darkMode"/></div>
                                <div class="col-12">(empty browser cache or use CTRL + F5 after reboot to apply this setting)</div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8 col-sm-3">Region</div>
                                <div class="col-4 col-sm-9" id="region"></div>
                            </div>
                            <div class="row mb-5">
                                <div class="col-8 col-sm-3">Timezone</div>
                                <div class="col-4 col-sm-9" id="timezone"></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8 col-sm-3">Custom link (leave empty to hide element in navigation)</div>
                                <div class="col-4 col-sm-9"><input type="text" name="cstLnk"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8 col-sm-3">Custom link Text</div>
                                <div class="col-4 col-sm-9"><input type="text" name="cstLnkTxt"/></div>
                            </div>
                        </fieldset>
                        <fieldset class="mb-4" id="serialCb">
                            <legend class="des">Serial console</legend>
                        </fieldset>
                    </div>

                    <button type="button" class="s_collapsible">Network</button>
                    <div class="s_content">
                        <fieldset class="mb-2">
                            <legend class="des">WiFi</legend>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">AP Password (min. length: 8)</div>
                                <div class="col-12 col-sm-9"><input type="text" name="ap_pwd" minlength="8" /></div>
                            </div>
                            <div class="row mb-2 mb-sm-3">
                                <div class="col-12 col-sm-3 my-2">SSID</div>
                                <div class="col-12 col-sm-9">
                                    <input type="text" name="ssid"/><br/>
                                    <a href="/wizard">scan for WiFi networks</a>
                                </div>
                            </div>
                            <div class="row mb-2 mb-sm-3">
                                <div class="col-12 col-sm-3">SSID is hidden</div>
                                <div class="col-12 col-sm-9"><input type="checkbox" name="hidd"/></div>
                            </div>
                            <div class="row mb-2 mb-sm-3">
                                <div class="col-12 col-sm-3 my-2">Password</div>
                                <div class="col-12 col-sm-9"><input type="password" name="pwd" value="{PWD}"/></div>
                            </div>
                        </fieldset>
                        <fieldset class="mb-4">
                            <legend class="des">Static IP (optional)</legend>
                            <p>
                                Leave fields blank for DHCP<br/>The following fields are parsed in this format: 192.168.4.1
                            </p>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">IP Address</div>
                                <div class="col-12 col-sm-9"><input type="text" name="ipAddr" maxlength="15" /></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Submask</div>
                                <div class="col-12 col-sm-9"><input type="text" name="ipMask" maxlength="15" /></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">DNS 1</div>
                                <div class="col-12 col-sm-9"><input type="text" name="ipDns1" maxlength="15" /></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">DNS 2</div>
                                <div class="col-12 col-sm-9"><input type="text" name="ipDns2" maxlength="15" /></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Gateway</div>
                                <div class="col-12 col-sm-9"><input type="text" name="ipGateway" maxlength="15" /></div>
                            </div>
                        </fieldset>
                    </div>

                    <button type="button" class="s_collapsible">Protection</button>
                    <div class="s_content">
                        <fieldset class="mb-4">
                            <legend class="des mx-2">Protection</legend>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 mb-2 mt-2">Admin Password</div>
                                <div class="col-12 col-sm-9"><input type="password" name="adminpwd" value="{PWD}"/></div>
                            </div>
                            <p>Select pages which should be protected by password</p>
                            <div id="prot_mask"></div>
                        </fieldset>
                    </div>

                    <button type="button" class="s_collapsible">Inverter</button>
                    <div class="s_content">
                        <fieldset class="mb-4">
                        <legend class="des">Inverter</legend>
                            <div id="inverter"></div>
                            <div class="row mb-3">
                                <div class="col-8 my-2">Interval [s]</div>
                                <div class="col-4"><input type="number" name="invInterval" title="Invalid input"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8 mb-2">Reset values and YieldDay at midnight</div>
                                <div class="col-4"><input type="checkbox" name="invRstMid"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8 mb-2">Reset values at sunrise</div>
                                <div class="col-4"><input type="checkbox" name="invRstComStart"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8 mb-2">Reset values at sunset</div>
                                <div class="col-4"><input type="checkbox" name="invRstComStop"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8">Reset values when inverter status is 'not available'</div>
                                <div class="col-4"><input type="checkbox" name="invRstNotAvail"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8">Include reset 'max' values</div>
                                <div class="col-4"><input type="checkbox" name="invRstMaxMid"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8">Start without time sync (useful in AP-Only-Mode)</div>
                                <div class="col-4"><input type="checkbox" name="strtWthtTm"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8">Read Grid Profile</div>
                                <div class="col-4"><input type="checkbox" name="rdGrid"/></div>
                            </div>
                        </fieldset>
                    </div>

                    <button type="button" class="s_collapsible">NTP Server</button>
                    <div class="s_content">
                        <fieldset class="mb-4">
                            <legend class="des">NTP Server</legend>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">NTP Server / IP</div>
                                <div class="col-12 col-sm-9"><input type="text" name="ntpAddr"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">NTP Port</div>
                                <div class="col-12 col-sm-9"><input type="number" name="ntpPort"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">NTP Interval (in minutes, min. 5 minutes)</div>
                                <div class="col-12 col-sm-9"><input type="number" name="ntpIntvl"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">set system time</div>
                                <div class="col-12 col-sm-9">
                                    <input type="button" name="ntpBtn" id="ntpBtn" class="btn" value="from browser" onclick="setTime()"/>
                                    <input type="button" name="ntpSync" id="ntpSync" class="btn" value="sync NTP" onclick="syncTime()"/><br/>
                                    <span id="apiResultNtp"></span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">System Time</div>
                                <div class="col-12 col-sm-9 my-2"><span id="date"></span></div>
                            </div>
                        </fieldset>
                    </div>

                    <button type="button" class="s_collapsible">Sunrise & Sunset</button>
                    <div class="s_content">
                        <fieldset class="mb-4">
                            <legend class="des">Sunrise & Sunset</legend>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Latitude (decimal)</div>
                                <div class="col-12 col-sm-9"><input type="number" name="sunLat" step="any"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Longitude (decimal)</div>
                                <div class="col-12 col-sm-9"><input type="number" name="sunLon" step="any"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Offset (sunrise)</div>
                                <div class="col-12 col-sm-9"><select name="sunOffsSr"></select></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Offset (sunset)</div>
                                <div class="col-12 col-sm-9"><select name="sunOffsSs"></select></div>
                            </div>
                        </fieldset>
                    </div>

                    <button type="button" class="s_collapsible">MQTT</button>
                    <div class="s_content">
                        <fieldset class="mb-4">
                            <legend class="des">MQTT</legend>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Broker / Server IP</div>
                                <div class="col-12 col-sm-9"><input type="text" name="mqttAddr"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Port</div>
                                <div class="col-12 col-sm-9"><input type="number" name="mqttPort"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Client Id (optional)</div>
                                <div class="col-12 col-sm-9"><input type="text" name="mqttClientId"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Username (optional)</div>
                                <div class="col-12 col-sm-9"><input type="text" name="mqttUser"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Password (optional)</div>
                                <div class="col-12 col-sm-9"><input type="password" name="mqttPwd"/></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Topic</div>
                                <div class="col-12 col-sm-9"><input type="text" name="mqttTopic" pattern="[\-\+A-Za-z0-9\.\/#\$%&=_]+" title="Invalid input" /></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Payload as JSON</div>
                                <div class="col-12 col-sm-9"><input type="checkbox" name="mqttJson" /></div>
                            </div>
                            <p class="des">Send Inverter data in a fixed interval, even if there is no change. A value of '0' disables the fixed interval. The data is published once it was successfully received from inverter. (default: 0)</p>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Interval</div>
                                <div class="col-12 col-sm-9"><input type="number" name="mqttInterval" title="Invalid input" /></div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-12 col-sm-3 my-2">Discovery Config (homeassistant)</div>
                                <div class="col-12 col-sm-9">
                                    <input type="button" name="mqttDiscovery" id="mqttDiscovery" class="btn" value="send" onclick="sendDiscoveryConfig()"/>
                                    <span id="apiResultMqtt"></span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-8 col-sm-3">enable retain flag</div>
                                <div class="col-4 col-sm-9"><input type="checkbox" name="retain"/></div>
                            </div>
                        </fieldset>
                    </div>

                    <button type="button" class="s_collapsible">Pinout Configuration</button>
                    <div class="s_content">
                        <fieldset class="mb-4">
                            <legend class="des">Pinout Configuration</legend>
                            <p class="des">Status LEDs</p>
                            <div id="pinout"></div>

                            <p class="des">Radio (NRF24L01+)</p>
                            <div id="rf24"></div>
                            <p class="des">Radio (CMT2300A)</p>
                            <div id="cmt"></div>
                            <p class="des">Ethernet</p>
                            <div id="eth"></div>
                        </fieldset>
                    </div>

                    <div class="row mb-4 mt-4">
                        <div class="col-8 col-sm-3">Reboot device after successful save</div>
                        <div class="col-4 col-sm-9">
                            <input type="checkbox" name="reboot" checked />
                            <input type="submit" value="save" class="btn right"/>
                        </div>
                    </div>
                </form>
                <div class="hr mb-3 mt-3"></div>
                <div class="mb-4 mt-4">
                    <a class="btn" href="/erase">ERASE SETTINGS (not WiFi)</a>
                    <fieldset class="mb-4">
                        <legend class="des">Import / Export JSON Settings</legend>
                        <div class="row mb-4 mt-4">
                            <div class="col-12 col-sm-3">Import</div>
                            <div class="col-12 col-sm-9">
                                <form id="form" method="POST" action="/upload" enctype="multipart/form-data" accept-charset="utf-8">
                                    <div class="row">
                                        <div class="col-12 col-sm-8 my-2"><input type="file" id="importFileInput" name="upload"></div>
                                        <div class="col-12 col-sm-4 my-2"><input type="button" id="importButton" class="btn" value="Import" onclick="hide()"></div>
                                    </div>
                                </form>
                            </div>
                        </div>
                        <div class="row mb-4 mt-4">
                            <div class="col-12 col-sm-3 my-2">Export</div>
                            <div class="col-12 col-sm-9">
                                <a class="btn" href="/get_setup" target="_blank">Export settings (JSON file)</a><span> (only values, passwords will be skipped!)</span>
                            </div>
                        </div>
                    </fieldset>
                </div>
            </div>
        </div>
<div id="footer">
        <div class="left">
		<ul>
          <li><a href="https://ahoydtu.de" target="_blank">this is a copy from ahoy(lumapu)&copy; 2025</a></li>
          <li><a href="https://discord.gg/WzhxEY62mB" target="_blank">original ahoy on Discord</a></li>
          <li><a href="https://github.com/lumapu/ahoy" target="_blank">original ahoy on github</a></li>
		</ul>
    </div>
    <div class="right">
        <ul>
            <li><a target="_blank" href="https://github.com/lumapu/ahoy/commits/0000000">GIT SHA: 0000000 :: 0.8.155</a></li>
            <li id="esp_type"></li>
            <li><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed" target="_blank" >CC BY-NC-SA 4.0</a></li>
        </ul>
    </div>
</div>
        <script type="text/javascript">
            var maxInv = 0;
            var ts = 0;


            var esp32pins = [
                [255, "off / default"],
                [0,  "GPIO0"],
                [1,  "TX (GPIO1)"],
                [2,  "GPIO2 (LED)"],
                [3,  "RX (GPIO3)"],
                [4,  "GPIO4"],
                [5,  "GPIO5"],
                [12, "GPIO12 (HSPI MISO)"],
                [13, "GPIO13 (HSPI MOSI)"],
                [14, "GPIO14 (HSPI SCLK)"],
                [15, "GPIO15"],
                [16, "GPIO16"],
                [17, "GPIO17"],
                [18, "GPIO18 (VSPI SCLK)"],
                [19, "GPIO19 (VSPI MISO)"],
                [21, "GPIO21 (SDA)"],
                [22, "GPIO22 (SCL)"],
                [23, "GPIO23 (VSPI MOSI)"],
                [25, "GPIO25"],
                [26, "GPIO26"],
                [27, "GPIO27"],
                [32, "GPIO32"],
                [33, "GPIO33"],
                [34, "GPIO34 (in only)"],
                [35, "GPIO35 (in only)"],
                [36, "VP (GPIO36, in only)"],
                [39, "VN (GPIO39, in only)"]
            ];
            var nrfPa = [
                [0, "MIN (recommended)"],
                [1, "LOW"],
                [2, "HIGH"],
                [3, "MAX (experimental)"]
            ];
            var esp32cmtPa = [];
            var esp32cmtFreq = [];

            var freqFmt = new Intl.NumberFormat('en-US', {
                minimumIntegerDigits: 3,
                minimumFractionDigits: 2
            });
            for(var i = 0; i < 31; i++) {
                esp32cmtPa.push([i, String(i-10) + " dBm"]);
            }
            var led_high_active = [
                [0, "low active"],
                [1, "high active"],
            ];

            window.onload = function() {
                for(it of document.getElementsByClassName("s_collapsible")) {
                    it.addEventListener("click", function() {
                        this.classList.toggle("active");
                        var content = this.nextElementSibling;
                        content.style.display = (content.style.display === "block") ? "none" : "block";
                    });
                }

                document.getElementById("settings").addEventListener("submit", function() {
                    var inputs = document.querySelectorAll("input[type='number']");
                    for (var i = 0; i < inputs.length; i++) {
                        if (inputs[i].value.indexOf(",") != -1)
                            inputs[i].value = inputs[i].value.replace(",", ".");
                    }
                });
            }

            function apiCbWifi(obj) {
                var e = document.getElementById("networks");
                selDelAllOpt(e);
                if(obj["success"])
                    e.appendChild(opt("-1", "scanning ..."))
                else
                    e.appendChild(opt("-1", "Error: " + obj["error"]));
            }

            function apiCbNtp(obj) {
                var e = document.getElementById("apiResultNtp");
                if(obj["success"])
                    e.innerHTML = "command executed, set new time ...";
                else
                    e.innerHTML = "Error: " + obj["error"];
            }

            function apiCbNtp2(obj) {
                var e = document.getElementById("apiResultNtp");
                var date = new Date(obj["ts_now"] * 1000);
                e.innerHTML = "synced at: " + toIsoDateStr(date) + ", difference: " + (ts - obj["ts_now"]) + "ms";
            }

            function apiCbMqtt(obj) {
                var e = document.getElementById("apiResultMqtt");
                if(obj["success"])
                    e.innerHTML = "command executed";
                else
                    e.innerHTML = "Error: " + obj["error"];
            }

            function setTime() {
                var date = new Date()
                var obj = {cmd: "set_time", token: "*", val: parseInt(date.getTime() / 1000)}
                getAjax("/api/setup", apiCbNtp, "POST", JSON.stringify(obj))
                setTimeout(function() {getAjax('/api/index', apiCbNtp2)}, 2000)
            }

            function syncTime() {
                var obj = {cmd: "sync_ntp", token: "*"}
                getAjax("/api/setup", apiCbNtp, "POST", JSON.stringify(obj))
                setTimeout(function() {getAjax('/api/index', apiCbNtp2)}, 2000)
            }

            function sendDiscoveryConfig() {
                var obj = {cmd: "discovery_cfg", token: "*"}
                getAjax("/api/setup", apiCbMqtt, "POST", JSON.stringify(obj));
            }

            document.addEventListener('DOMContentLoaded', () => {
                const fileInput = document.querySelector('#importFileInput');
                const button = document.querySelector('#importButton');
                button.disabled = true;
                button.title = "Please select a file first";
                fileInput.addEventListener('change', () => {
                    if (fileInput.value) {
                        button.disabled = false;
                        button.title = "";
                    } else {
                        button.disabled = true;
                        button.title = "Please select a file first";
                    }
                });
            });

            function hide() {
                document.getElementById("form").submit();
                var e = document.getElementById("content");
                e.replaceChildren(span("upload started"));
            }

            function delIv() {
                var id = this.id.substring(0, this.id.length-3);
                document.getElementById(id).remove();
            }

            function mlCb(id, des, chk=false) {
                var cb = ml("input", {type: "checkbox", id: id, name: id}, "");
                if(chk)
                    cb.checked = true;
                return ml("div", {class: "row mb-3"}, [
                    ml("div", {class: "col-8 col-sm-3"}, des),
                    ml("div", {class: "col-4 col-sm-9"}, cb)
                ]);
            }

            function mlE(des, e) {
                return ml("div", {class: "row mb-3"}, [
                    ml("div", {class: "col-12 col-sm-3 my-2"}, des),
                    ml("div", {class: "col-12 col-sm-9"}, e)
                ]);
            }

            function getFreeId() {
                var id = 0;
                while(id < maxInv) {
                    if(null == document.getElementById("inv" + id))
                        return id;
                    id++;
                }
                return null;
            }

            function ivGlob(obj) {
                for(var i of [["invInterval", "interval"]])
                    document.getElementsByName(i[0])[0].value = obj[i[1]];
                for(var i of ["Mid", "ComStop", "ComStart", "NotAvail", "MaxMid"])
                    document.getElementsByName("invRst"+i)[0].checked = obj["rst" + i];
                document.getElementsByName("strtWthtTm")[0].checked = obj["strtWthtTm"];
                document.getElementsByName("rdGrid")[0].checked = obj["rdGrid"];
            }

            function parseSys(obj) {
                document.getElementsByName("device")[0].value = obj.device_name;
                for(var i of [["ssid", "ssid"], ["ap_pwd", "ap_pwd"]])
                    document.getElementsByName(i[0])[0].value = obj.network[i[1]];
                document.getElementsByName("hidd")[0].checked = obj.network.hidd;

                document.getElementsByName("darkMode")[0].checked = obj.dark_mode;
                document.getElementsByName("schedReboot")[0].checked = obj.sched_reboot;
                e = document.getElementsByName("adminpwd")[0];
                if(!obj.pwd_set)
                    e.value = "";
                var d = document.getElementById("prot_mask");
                var a = ["Index", "Live", "Webserial", "Settings", "Update", "System", "History"];
                var el = [];
                for(var i = 0; i < 7; i++) {
                    var chk = ((obj.prot_mask & (1 << i)) == (1 << i));
                    el.push(mlCb("protMask" + i, a[i], chk))
                }
                d.append(...el);
            }

            function parseGeneric(obj) {
                parseNav(obj)
                parseESP(obj)
                parseRssi(obj)
                parseTitle(obj)

                if(0 != obj.cst_lnk.length) {
                    document.getElementsByName("cstLnk")[0].value = obj.cst_lnk
                    document.getElementsByName("cstLnkTxt")[0].value = obj.cst_lnk_txt
                }

                ts = obj.ts_now;
                window.setInterval("tick()", 1000);

                var tz = []
                for(i = 0; i < 24; i += 0.5)
                    tz.push([i, ((i-12 > 0) ? "+" : "") + String(i-12)]);
                document.getElementById("timezone").append(sel("timezone", tz, obj.timezone + 12))
                var region = [[0, "Europe (860 - 870 MHz)"], [1, "USA, Indonesia (905 - 925 MHz)"], [2, "Brazil (915 - 928 MHz)"]]
                document.getElementById("region").append(sel("region", region, obj.region))
            }

            function parseStaticIp(obj) {
                for(var i of [["ipAddr", "ip"], ["ipMask", "mask"], ["ipDns1", "dns1"], ["ipDns2", "dns2"], ["ipGateway", "gateway"]])
                    if(null != obj[i[1]])
                        document.getElementsByName(i[0])[0].value = obj[i[1]];
            }

            function parseIv(obj) {
                maxInv = obj["max_num_inverters"];
                var lines = [];
                lines.push(ml("tr", {}, [
                    ml("th", {style: "width: 10%; text-align: center;"}, ""),
                    ml("th", {}, "Name"),
                    ml("th", {class: "d-none d-sm-cell"}, "Serial"),
                    ml("th", {style: "width: 10%; text-align: center;"}, "Edit"),
                    ml("th", {style: "width: 10%; text-align: center;"}, "Delete")
                ]));

                for(let i = 0; i < obj.inverter.length; i++) {
                    lines.push(ml("tr", {}, [
                        ml("td", {}, badge(obj.inverter[i].enabled, (obj.inverter[i].enabled) ? "enabled" : "disabled")),
                        ml("td", {}, obj.inverter[i].name),
                        ml("td", {class: "d-none d-sm-cell"}, String(obj.inverter[i].serial)),
                        ml("td", {style: "text-align: center;", onclick: function() {ivModal(obj.inverter[i]);}}, svg(iconGear, 25, 25, "icon icon-fg pointer")),
                        ml("td", {style: "text-align: center; ", onclick: function() {ivDel(obj.inverter[i]);}}, svg(iconDel, 25, 25, "icon icon-fg pointer"))
                    ]));
                }

                var add = new Object();
                add.id = obj.inverter.length;
                add.name = "";
                add.enabled = true;
                add.ch_max_pwr = [400,400,400,400,400,400];
                add.ch_name = [];
                add.ch_yield_cor = [];
                add.freq = 12;
                add.pa = 30;

                var e = document.getElementById("inverter");
                e.innerHTML = ""; // remove all childs
                e.append(ml("table", {class: "table"}, ml("tbody", {}, lines)));
                if(obj.max_num_inverters > obj.inverter.length)
                    e.append(ml("div", {class: "row my-3"}, ml("div", {class: "col a-r"}, ml("input", {type: "button", value: "add Inverter", class: "btn", onclick: function() { ivModal(add); }}, null))));

                ivGlob(obj);
            }

            function divRow(item0, item1) {
                return ml("div", {class: "row mb-3"}, [
                    ml("div", {class: "col-3 mt-2"}, item0),
                    ml("div", {class: "col-9"}, item1)
                ])
            }

            function ivModal(obj) {
                var lines = [];
                lines.push(ml("tr", {}, [
                    ml("th", {style: "width: 10%;"}, "Input"),
                    ml("th", {}, "Max Module Power [Wp]"),
                    ml("th", {}, "Name (optional)"),
                    ml("th", {}, "Yield Correction [kWh] (optional)")
                ]));

                for(let i = 0; i < 6; i++) {
                    lines.push(ml("tr", {id: "ch"+i}, [
                        ml("td", {}, String(i+1)),
                        ml("td", {}, ml("input", {name: "ch_p"+i, class: "text", type: "number", max: 999, value: obj.ch_max_pwr[i]}, null)),
                        ml("td", {}, ml("input", {name: "ch_n"+i, class: "text", type: "text", maxlength: 15, value: (undefined === obj.ch_name[i]) ? "" : obj.ch_name[i]}, null)),
                        ml("td", {}, ml("input", {name: "yld_c"+i, class: "text", type: "number", max: 999999, value: obj.ch_yield_cor[i], step: "0.001"}, null))
                    ]));
                }

                var cbEn = ml("input", {name: "enable", type: "checkbox"}, null);
                var cbDisNightCom = ml("input", {name: "disnightcom", type: "checkbox"}, null);
                cbEn.checked = (obj.enabled);
                cbDisNightCom.checked = (obj.disnightcom);

                var ser = ml("input", {name: "ser", class: "text", type: "text", pattern: "[0-9a-fA-F]{12}", value: obj.serial}, null);
                var html = ml("div", {}, [
                    tabs(["General", "Inputs", "Radio", "Advanced"]),
                    ml("div", {id: "divGeneral", class: "tab-content"}, [
                        divRow("Enabled", cbEn),
                        divRow("Serial", ser),
                        divRow("Name", ml("input", {name: "name", class: "text", type: "text", value: obj.name}, null))
                    ]),
                    ml("div", {id: "divInputs", class: "tab-content hide"}, [
                        ml("div", {class: "row mb-3"},
                            ml("table", {class: "table"}, ml("tbody", {}, lines))
                        )
                    ]),
                    ml("div", {id: "divRadio", class: "tab-content hide"}, [
                        ml("input", {type: "hidden", name: "isnrf"}, null),
                        ml("div", {id: "setcmt"}, [
                            divRow("Frequency", sel("freq", esp32cmtFreq, obj.freq)),
                            divRow("Power Level", sel("cmtpa", esp32cmtPa, obj.pa)),
                            divRow("Catch Inverter", ml("input", {type: "button", value: "start", class: "btn", onclick: function() { cmtSearch(); }}, null))
                        ]),
                        ml("div", {id: "setnrf"},
                            divRow("Power Level", sel("nrfpa", nrfPa, obj.pa))
                        ),
                    ]),
                    ml("div", {id: "divAdvanced", class: "tab-content hide"}, [
                        ml("div", {class: "row mb-3"}, [
                            ml("div", {class: "col-10"}, "Pause communication during night (lat. and lon. need to be set)"),
                            ml("div", {class: "col-2"}, cbDisNightCom)
                        ])
                    ]),
                    ml("div", {class: "row mt-5"}, [
                        ml("div", {class: "col-8", id: "res"}, ""),
                        ml("div", {class: "col-4 a-r"}, ml("input", {type: "button", value: "save", class: "btn", onclick: function() { ivSave(); }}, null))
                    ])
                ]);

                ['keyup', 'change'].forEach(function(evt) {
                    ser.addEventListener(evt, (e) => {
                        var sn = parseInt(ser.value, 16);
                        sn = Math.floor(sn / Math.pow(2, 32));

                        var max = 1;
                        switch(sn & 0x00f0) {
                            case 0x0010: max = 1; break;
                            case 0x0040: max = 2; break;
                            case 0x0060: max = 4; break;
                            case 0x0080: max = 6; break;
                        }
                        for(var i = 0; i < 6; i++) {
                            setHide("ch"+i, (i >= max));
                        }

                        var nrf = true;
                        switch(sn & 0xff00) {
                            case 0x1000: nrf = true; break;
                            case 0x1100:
                                switch(sn & 0x000f) {
                                    case 0x0004:
                                    case 0x0005: nrf = false; break;
                                    default:     nrf = true; break;
                                }
                                break;
                            case 0x1300: nrf = false; break;
                        }
                        setHide("setcmt", nrf);
                        setHide("setnrf", !nrf);
                        document.getElementsByName("isnrf")[0].value = nrf;
                    })
                });

                modal("Edit inverter: " + obj.name, html);
                ser.dispatchEvent(new Event('change'));

                function ivSave() {
                    var o = {}
                    o.cmd  = "save_iv"
                    o.token = "*"
                    o.id   = obj.id

                    let sn = document.getElementsByName("ser")[0].value
                    if(sn[0] == 'A')
                        sn = convHerf(sn)
                    o.ser  = parseInt(sn, 16)

                    o.name = document.getElementsByName("name")[0].value;
                    o.en   = document.getElementsByName("enable")[0].checked;
                    o.ch = [];
                    for(let i = 0; i < 6; i++) {
                        var q = new Object();
                        q.pwr  = document.getElementsByName("ch_p"+i)[0].value;
                        q.name = document.getElementsByName("ch_n"+i)[0].value;
                        q.yld  = document.getElementsByName("yld_c"+i)[0].value;
                        o.ch.push(q);
                    }
                    if("true" == document.getElementsByName("isnrf")[0].value)
                        o.pa = document.getElementsByName("nrfpa")[0].value;
                    else
                        o.pa   = document.getElementsByName("cmtpa")[0].value;
                    o.freq = document.getElementsByName("freq")[0].value;
                    o.disnightcom = document.getElementsByName("disnightcom")[0].checked;
                    getAjax("/api/setup", cb, "POST", JSON.stringify(o));
                }

                function cmtSearch() {
                    var o = {}
                    o.cmd = "cmt_search"
                    o.token = "*"
                    o.id = obj.id
                    o.to_ch = document.getElementsByName("freq")[0].value;

                    getAjax("/api/ctrl", cb, "POST", JSON.stringify(o));
                }

                function convHerf(sn) {
                    let sn_int = 0n;
                    const CHARS = "0123456789ABCDEFGHJKLMNPRSTUVWXY";

                    for (let i = 0; i < 9; ++i) {
                        const pos = CHARS.indexOf(sn[i])
                        const shift = 42 - 5 * i - (i <= 2 ? 0 : 2)
                        sn_int |= BigInt(pos) << BigInt(shift)
                    }

                    let first4Hex = (sn_int >> 32n) & 0xFFFFn

                    if (first4Hex === 0x2841n)
                        first4Hex = 0x1121n
                    else if (first4Hex === 0x2821n)
                        first4Hex = 0x1141n
                    else if (first4Hex === 0x2801n)
                        first4Hex = 0x1161n

                    sn_int = (sn_int & ~(0xFFFFn << 32n)) | (first4Hex << 32n);

                    return sn_int.toString(16)
                }

                function cb(obj2) {
                    var e = document.getElementById("res");
                    if(!obj2.success)
                        e.innerHTML = "Error:" + obj2.error;
                    else {
                        modalClose();
                        getAjax("/api/inverter/list", parseIv);
                    }
                }
            }

            function ivDel(obj) {
                var html = ml("div", {class: "row"}, [
                    ml("div", {class: "col-9"}, "do you really want to delete inverter? (" + obj.name + ")"),
                    ml("div", {class: "col-3 a-r"}, ml("div", {class: "col-4 a-r"}, ml("input", {type: "button", value: "yes", class: "btn", onclick: function() { del(); }}, null)))
                ]);
                modal("Delete inverter: " + obj.name, html);

                function del() {
                    var o = new Object();
                    o.cmd  = "save_iv";
                    o.token = "*"
                    o.id   = obj.id;
                    o.ser  = 0;
                    o.name = "";
                    o.en   = false;
                    o.ch = [];
                    for(let i = 0; i < 6; i++) {
                        var q = new Object();
                        q.pwr  = 0;
                        q.name = "";
                        q.yld  = 0;
                        o.ch.push(q);
                    }
                    getAjax("/api/setup", cb, "POST", JSON.stringify(o));
                }

                function cb(obj) {
                    if(obj.success) {
                        modalClose();
                        getAjax("/api/inverter/list", parseIv);
                    }
                }
            }

            function parseMqtt(obj) {
                for(var i of [["Addr", "broker"], ["Port", "port"], ["ClientId", "clientId"], ["User", "user"], ["Pwd", "pwd"], ["Topic", "topic"], ["Interval", "interval"]])
                    document.getElementsByName("mqtt"+i[0])[0].value = obj[i[1]];
                document.getElementsByName("mqttJson")[0].checked = obj["json"];
                document.getElementsByName("retain")[0].checked = obj.retain
            }

            function parseNtp(obj) {
                for(var i of [["ntpAddr", "addr"], ["ntpPort", "port"], ["ntpIntvl", "interval"]])
                    document.getElementsByName(i[0])[0].value = obj[i[1]];
            }

            function parseSun(obj) {
                document.getElementsByName("sunLat")[0].value = obj["lat"];
                document.getElementsByName("sunLon")[0].value = obj["lon"];
                for(p of [["sunOffsSr", "offsSr"], ["sunOffsSs", "offsSs"]]) {
                    const sel = document.getElementsByName(p[0])[0];
                    for(var i = -60; i <= 60; i++) {
                        sel.appendChild(opt(i, i + " minutes", (i == (obj[p[1]] / 60))));
                    }
                }
            }

            function parsePinout(obj) {
                var e = document.getElementById("pinout");
                var pinList = esp32pins;
                pins = [['led0', 'pinLed0', 'At least one inverter is producing'], ['led1', 'pinLed1', 'MqTT connected'], ['led2', 'pinLed2', 'Night time']];
                for(p of pins) {
                    e.append(
                        ml("div", {class: "row mb-3"}, [
                            ml("div", {class: "col-12 col-sm-3 my-2"}, p[2]),
                            ml("div", {class: "col-12 col-sm-9"},
                                sel(p[1], pinList, obj[p[0]])
                            )
                        ])
                    );
                }
                e.append(
                    ml("div", { class: "row mb-3" }, [
                        ml("div", { class: "col-12 col-sm-3 my-2" }, "LED polarity"),
                        ml("div", { class: "col-12 col-sm-9" },
                            sel('pinLedHighActive', led_high_active, obj.led_high_active)
                        )
                    ]),
                    ml("div", { class: "row mb-3" }, [
                        ml("div", { class: "col-12 col-sm-3 my-2" }, "LED luminance (0-255)"),
                        ml("div", { class: "col-12 col-sm-9" }, ml("input", {class: "text", type: "number", name: "pinLedLum", value: obj.led_lum, min: 0, max: 255}, null))
                    ])
                )
            }

            function parseNrfRadio(obj, objPin) {
                var e = document.getElementById("rf24");
                var en = inp("nrfEnable", null, null, ["cb"], "nrfEnable", "checkbox");
                en.checked = obj["en"];

                var pinList = esp32pins;

                e.replaceChildren (
                    ml("div", {class: "row mb-3"}, [
                        ml("div", {class: "col-8 col-sm-3 my-2"}, "NRF24 radio enable"),
                        ml("div", {class: "col-4 col-sm-9"}, en)
                    ])
                );

                var pins = [['cs', 'pinCs'], ['ce', 'pinCe'], ['irq', 'pinIrq'], ['sclk', 'pinSclk'], ['mosi', 'pinMosi'], ['miso', 'pinMiso']];
                for(p of pins) {
                    e.append(
                        ml("div", {class: "row mb-3"}, [
                            ml("div", {class: "col-12 col-sm-3 my-2"}, p[0].toUpperCase()),
                            ml("div", {class: "col-12 col-sm-9"},
                                sel(p[1], pinList, objPin[p[0]])
                            )
                        ])
                    );
                }
            }

            function parseCmtRadio(obj) {
                var e = document.getElementById("cmt");
                var en = inp("cmtEnable", null, null, ["cb"], "cmtEnable", "checkbox");
                var pinList = esp32pins;

                en.checked = obj["en"];
                e.replaceChildren (
                    ml("div", {class: "row mb-3"}, [
                        ml("div", {class: "col-8 col-sm-3 my-2"}, "CMT2300A radio enable"),
                        ml("div", {class: "col-4 col-sm-9"}, en)
                    ])
                );
                pins = [['sclk', 'pinCmtSclk'], ['sdio', 'pinSdio'], ['csb', 'pinCsb'], ['fcsb', 'pinFcsb'], ['gpio3', 'pinGpio3']];
                for(p of pins) {
                    e.append(
                        ml("div", {class: "row mb-3"}, [
                            ml("div", {class: "col-12 col-sm-3 my-2"}, p[0].toUpperCase()),
                            ml("div", {class: "col-12 col-sm-9"},
                                sel(p[1], pinList, obj[p[0]])
                            )
                        ])
                    );
                }

                var i = 0
                while(obj.freq_max >= (obj.freq_min + i * 0.25)) {
                    esp32cmtFreq.push([i, freqFmt.format(obj.freq_min + i * 0.25) + " MHz"])
                    i++
                }
            }

            function parseEth(obj) {
                var e = document.getElementById("eth");
                var en = inp("ethEn", null, null, ["cb"], "ethEn", "checkbox");
                var pinList = esp32pins;

                en.checked = obj["en"];
                e.replaceChildren (
                    ml("div", {class: "row mb-3"}, [
                        ml("div", {class: "col-8 col-sm-3 my-2"}, "Ethernet enable"),
                        ml("div", {class: "col-4 col-sm-9"}, en)
                    ])
                );
                pins = [['cs', 'ethCs'], ['sclk', 'ethSclk'], ['miso', 'ethMiso'], ['mosi', 'ethMosi'], ['irq', 'ethIrq'], ['reset', 'ethRst']];
                for(p of pins) {
                    e.append(
                        ml("div", {class: "row mb-3"}, [
                            ml("div", {class: "col-12 col-sm-3 my-2"}, p[0].toUpperCase()),
                            ml("div", {class: "col-12 col-sm-9"},
                                sel(p[1], pinList, obj[p[0]])
                            )
                        ])
                    );
                }
            }

            function parseSerial(obj) {
                var e = document.getElementById("serialCb")
                var l = [["serEn", "show_live_data", "print inverter data"], ["serDbg", "debug", "Serial Debug"], ["priv", "priv", "Privacy Mode"], ["wholeTrace", "wholeTrace", "Print whole traces in Log"], ["log2mqtt", "log2mqtt", "Send Serial debug over MqTT"]]
                for(var i of l) {
                    var cb = ml("input", {name: i[0], type: "checkbox"}, null)
                    cb.checked = obj[i[1]]
                    e.appendChild(
                        ml("div", {class: "row mb-3"}, [
                            ml("div", {class: "col-8 col-sm-3"}, i[2]),
                            ml("div", {class: "col-4 col-sm-9"}, cb)
                        ])
                    )
                }
            }


            function tick() {
                document.getElementById("date").innerHTML = toIsoDateStr((new Date((++ts) * 1000)));
            }

            function parse(root) {
                if(null != root) {
                    parseGeneric(root.generic);
                    parseSys(root.system);
                    parseStaticIp(root.static_ip);
                    parseMqtt(root.mqtt);
                    parseNtp(root.ntp);
                    parseSun(root.sun);
                    parsePinout(root.pinout);
                    parseNrfRadio(root.radioNrf, root.pinout);
                    parseCmtRadio(root.radioCmt);
                    parseEth(root.eth)
                    parseSerial(root.serial);
                    getAjax("/api/inverter/list", parseIv);
                }
            }

            getAjax("/api/setup", parse);
        </script>
    </body>
</html>
