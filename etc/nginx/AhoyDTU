##
# WebService with NGINX for AhoyDTU
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name AhoyDTU;

	root /home/AhoyDTU/www/html;
	index index.html index.htm ; #index.php;
	default_type application/json;

	# https://stackoverflow.com/questions/12165810/how-to-disable-output-buffering-in-nginx-for-php-application
	fastcgi_buffering off;

################################################################################
#  GET  Aufruf(=URI)	--> Ziel
# (G1)  /api			--> /api.php
#		/api/asdf		--> /api.php
#		/api/asdf.png	--> /api.php
#       /api/asdf.php	--> /api.php
# (G2)  /api/index		--> /index.php
#		/api/info		--> /info.php
#       /api/system		--> /system.php
# (G3)  /api/index.php	--> /index.php
#		/api/info.php	--> /info.php
#       /api/system.php	--> /system.php

# (G5)  /api/inverter	--> /inverter.php
# (G6)  /api/setup		--> /setup.php
# (G7)	/api/html		--> /html.php?(save/system)
###############################################################################
# POST Aufruf			--> Ziel
# (P1)	/save			--> 
###############################################################################
# /save		--> wird zu "/save.html", diese Datei gibt es und wird angezeigt
# /asdf		--> wird zu "/asdf.html", falls nicht gefunden, wird auf "/index.html" umgeleitet
# /asdf.php	--> wird in "/etc/nginx/snippets/fastcgi-php.conf:5" mit =404 abgefangen
###############################################################################

#	add_header Content-Type text/plain;
#	return 200 "loc:events document_root:$document_root, request_uri:$request_uri URI:$uri";

	location ~ ^/events$ {
		#rewrite ^/(events)$ /api/$1.php last;
		rewrite ^/(events)$ $scheme://$http_host/api/$1.php last;
	add_header Content-Type text/plain;
	return 200 "loc:events document_root:$document_root, request_uri:$request_uri URI:$uri :$1";
    }

	location ~ ^/(erase|login|save|upload|updat|get_setup|factory|reboot|coredump|AhoyDTU_.+)+$ {
		limit_except GET POST{ deny all; }
		root /home/AhoyDTU/www;
		if ($uri = /login) {
			return 301 $scheme://$http_host/$1.html;
		}
		return 308 $scheme://$http_host/operating.php?$1;
	add_header Content-Type text/plain;
	return 200 "loc:login document_root:$document_root, request_uri:$request_uri URI:$uri :$1 REQUEST_METHOD:$request_method";
	}

	location ~ ^/api/inverter/(grid|list|id|alarm|version|radiostat)+/?(.*)?$ {	#(G5)
		limit_except GET { deny all; }
		root /home/AhoyDTU/www;
        # Problem, while connect via SSH-Tunnel
        # https://www.ruby-forum.com/t/port-redirection-issue-while-using-ssh-tunnel/235899
        # add to target: "$scheme://$http_host"
		return 301 $scheme://$http_host/inverter.php?$1=$2;
	add_header Content-Type text/plain;
	return 200 "loc:inverter document_root:$document_root, request_uri:$request_uri URI:$uri :$1";
	}

	location ~ ^/api/setup/?(getip|networks)?$ {					#(G6)
		limit_except GET POST { deny all; }
		root /home/AhoyDTU/www;
		if ($request_method = GET ) {
			return 301 $scheme://$http_host/setup.php?$1;
		}
		return 308 $scheme://$http_host/setup.php?$1;
	add_header Content-Type text/plain;
	return 200 "loc:setup document_root:$document_root, request_uri:$request_uri URI:$uri :$1";
	}

	location ~* ^/api/html/?(save|system).?$ {
		limit_except GET { deny all; }
		root /home/AhoyDTU/www;
		if ($uri ~* "^/api/html/(save|system)+.?$") {
			return 301 $scheme://$http_host/html.php?$1;			#(G7)
		}
		return 301 $scheme://$http_host/api.php;
	add_header Content-Type text/plain;
	return 200 "loc:api/html document_root:$document_root, request_uri:$request_uri URI:$uri :$1";
	}

	location ~* ^/api.?$|^/api/(.+)$ {
		limit_except GET { deny all; }
		root /home/AhoyDTU/www;
		if ( -f $document_root$uri ) {								#(G3)
			return 301 $scheme://$http_host/$1;						# URI ist vollständig, neustart ohne "/api"
		}
		if ( -f $document_root$uri.php ) {							#(G2)
			return 301 $scheme://$http_host/$1.php;					# anhängen von ".php", neustart ohne "/api"
		}
		return 301 $scheme://$http_host/api.php;					#(G1)
	add_header Content-Type text/plain;
	return 200 "loc:api document_root:$document_root, request_uri:$request_uri URI:$uri :$1";
	}

	location / {												# alles
		limit_except GET { deny all; }
		index index.html;
		# try_files $uri $uri/ $uri.html =404;
		# try_files $uri $uri/ @extensionless-php;
		try_files $uri $uri/ $uri.html /index.html;				# bei unbekannten Aufrufen wird "/index.html" geladen
#	add_header Content-Type text/plain;
#	return 200 "loc:root document_root:$document_root, request_uri:$request_uri URI:$uri";
	}

	location ~* \.php$ {
	# add_header Content-Type text/plain;
	# return 200 "loc:php-start document_root:$document_root, request_uri:$request_uri URI:$uri :$1";
		limit_except GET POST { deny all; }
		root /home/AhoyDTU/www/api;
		include /etc/nginx/snippets/fastcgi-php.conf;			# bei unbekannten Aufrufen wird =404 gesendet
		fastcgi_pass unix:/run/php/php8.2-fpm-ahoydtu.sock;		# Übergabe an PHP-FPM
	# add_header Content-Type text/plain;
	# return 200 "loc:php-last document_root:$document_root, request_uri:$request_uri URI:$uri :$1";
	}

##	location @extensionless-php {
##		limit_except GET { deny all; }
##		root /home/AhoyDTU/www;
##		## rewrite ^(/.*)/$ $1;                         ## wird nicht gebraucht
##		if ( -f $document_root$uri.php ) {     #(2)
##	#add_header Content-Type text/plain;
##	#return 200 "loc:ext2 document_root:$document_root, request_uri:$request_uri URI:$uri :$1";
##			rewrite ^ $uri.php last;           # neustart der Suche mit angehängtem ".php" und wird zu einer (3)
##		}
##		if ( -f $document_root/api$uri.php ) {
##			rewrite ^ $document_root/api$uri.php last;
##		}
##	add_header Content-Type text/plain;
##	return 200 "loc:ext3 document_root:$document_root, request_uri:$request_uri URI:$uri :$1";
##		include /etc/nginx/snippets/fastcgi-php.conf;
##		fastcgi_pass unix:/run/php/php-fpm.sock;
##	add_header Content-Type text/plain;
##	return 200 "loc:ext-last document_root:$document_root, request_uri:$request_uri URI:$uri :$1";
##	}
}
